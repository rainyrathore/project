{"version":3,"sources":["webpack:///src/common/uploads/directives/upload-button.directive.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttle.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttleTime.js","webpack:///src/common/shared/form-controls/upload-image-control/upload-image-control.component.ts","webpack:///src/common/shared/form-controls/upload-image-control/upload-image-control.component.html","webpack:///src/app/web-player/users/user-profile.service.ts","webpack:///src/app/web-player/users/user-profile-page/edit-user-profile-modal/edit-user-profile-modal.component.html","webpack:///src/app/web-player/users/user-profile-page/edit-user-profile-modal/edit-user-profile-modal.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/base-profile-tab.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/user-playlists-tab/user-playlists-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/user-playlists-tab/user-playlists-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/uploaded-tracks-tab/uploaded-tracks-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/uploaded-tracks-tab/uploaded-tracks-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/user-follows-tab/user-follows-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/user-follows-tab/user-follows-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/user-albums-tab/user-albums-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/user-albums-tab/user-albums-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/user-reposts-tab/user-reposts-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/user-reposts-tab/user-reposts-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/user-profile-page.component.html","webpack:///src/app/web-player/users/user-profile-page/user-profile-page.component.ts","webpack:///src/app/web-player/users/user-profile-page/user-profile-page-resolver.service.ts","webpack:///src/app/web-player/users/user-profile-page/user-profile-routing.module.ts","webpack:///src/app/web-player/users/user-profile-page/user-profile.module.ts","webpack:///src/common/core/utils/get-favicon-from-url.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.html"],"names":["UploadButtonDirective","el","config","filesSelected","this","nativeElement","addEventListener","e","preventDefault","stopPropagation","then","files","length","emit","defaultThrottleConfig","leading","trailing","throttleTime","duration","scheduler","a","source","lift","ThrottleTimeOperator","subscriber","subscribe","destination","super","_hasTrailingValue","_trailingValue","value","throttled","add","schedule","dispatchNext","next","complete","unsubscribe","remove","Subscriber","arg","clearThrottle","UploadImageControlComponent","uploadQueue","imageValidator","uploadsApi","fileDeleted","buttonText","uploadInputConfig","multiple","types","image","src$","fn","propagateChange","start","uploadConfig","defaultUploadConfig","response","fileEntry","url","paths","deleteForever","httpParams","diskPrefix","uri","Image","validator","provide","useExisting","multi","uploadImage","UserProfileService","http","currentUser","id","get","params","put","userId","contentType","user","cd","post","getModel","followed_users","push","markForCheck","followedUsers","i","findIndex","curr","splice","find","EditUserProfileModalComponent","BaseProfileTab","fb","dialogRef","profiles","avatarValidator","toast","valueLists","data","loading$","BehaviorSubject","form","group","avatar","username","first_name","last_name","profile","city","country","header_image","description","links","array","countries$","patchValue","forEach","link","addNewLink","countries","valueChanges","pipe","delay","confirm","closeModal","update","finalize","open","close","linkArray","title","index","removeAt","userProfile","zone","pagination$","changes","visible","isLoading","loadMoreItems","scrollContainer","closest","last_page","current_page","loadMore","page","currentPage","pagination","currentData","UserPlaylistsTabComponent","UploadedTracksTabComponent","tracks","trackDeleteSub","tracksDeleted$","filter","trackIds","newTracks","track","includes","UserFollowsTabComponent","urls","UserAlbumsTabComponent","albums","albumDeleteSub","albumsDeleted$","albumIds","newAlbums","album","UserRepostsTabComponent","UserProfilePageComponent","UserProfilePageResolver","UserProfileRoutingModule","UserProfileModule","route","router","settings","users","modal","sanitizer","tabs$","subscriptions","user$","canUploadTracks$","api","canUploadTracks","defaultTabs","setActiveTab","sub","events","event","subscription","header_colors","bypassSecurityTrustStyle","name","activeTab","tab","split","pop","beforeClosed","updatedUser","URL","origin","routes","path","component","resolve","state","loading","paramMap","catchError","navigate","mergeMap","of","noReuse","children","forChild","UploadProgressBarComponent","hidden","totalProgress","progress","count$","pending"],"mappings":"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","file":"x","sourcesContent":["import { Directive, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { openUploadWindow } from '../utils/open-upload-window';\r\nimport { UploadInputConfig } from '../upload-input-config';\r\nimport {UploadedFile} from '@common/uploads/uploaded-file';\r\n\r\n@Directive({\r\n    selector: '[uploadButton]'\r\n})\r\nexport class UploadButtonDirective implements OnInit {\r\n    @Input('uploadButton') config: UploadInputConfig = {};\r\n    @Output() filesSelected = new EventEmitter<UploadedFile[]>();\r\n\r\n    constructor(private el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        this.el.nativeElement.addEventListener('click', e => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            openUploadWindow(this.config).then(files => {\r\n                if (files && files.length) {\r\n                    this.filesSelected.emit(files);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n//# sourceMappingURL=throttle.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n    constructor(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n    constructor(destination, duration, scheduler, leading, trailing) {\n        super(destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    _next(value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n            else if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n    }\n    _complete() {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    clearThrottle() {\n        const throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    }\n}\nfunction dispatchNext(arg) {\n    const { subscriber } = arg;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadInputConfig, UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AppearanceImageUploadValidator} from '@common/admin/appearance/appearance-image-input/appearance-image-upload-validator';\nimport {UploadUri} from '@common/uploads/types/upload-uri.enum';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {UploadsApiService} from '@common/uploads/uploads-api.service';\n\n@Component({\n    selector: 'upload-image-control',\n    templateUrl: './upload-image-control.component.html',\n    styleUrls: ['./upload-image-control.component.scss'],\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: UploadImageControlComponent,\n        multi: true,\n    }]\n})\nexport class UploadImageControlComponent implements ControlValueAccessor {\n    @Output() fileDeleted = new EventEmitter();\n    @Input() defaultBackground: string;\n    @Input() buttonText = 'Upload image';\n    @Input() uploadConfig: UploadApiConfig;\n    @Input() diskPrefix: string;\n    public uploadInputConfig: UploadInputConfig = {multiple: false, types: [UploadInputTypes.image]};\n    public src$ = new BehaviorSubject<string>(null);\n    private propagateChange: Function;\n\n    constructor(\n        private uploadQueue: UploadQueueService,\n        private imageValidator: AppearanceImageUploadValidator,\n        private uploadsApi: UploadsApiService,\n    ) {}\n\n    public writeValue(value: string) {\n        this.src$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public uploadImage(files: UploadedFile[]) {\n        this.uploadQueue.start(files, this.uploadConfig || this.defaultUploadConfig())\n            .subscribe(response => {\n                this.src$.next(response.fileEntry.url);\n                this.propagateChange(response.fileEntry.url);\n            });\n    }\n\n    public deleteUpload() {\n        this.uploadsApi.delete({paths: [this.src$.value], deleteForever: true})\n            .subscribe(() => {\n                this.src$.next(null);\n                this.propagateChange(null);\n                this.fileDeleted.emit();\n            });\n    }\n\n    private defaultUploadConfig(): UploadApiConfig {\n        return {\n            httpParams: {diskPrefix: this.diskPrefix || 'common_media'},\n            uri: UploadUri.Image,\n            validator: this.imageValidator,\n        };\n    }\n}\n","<image-or-icon *ngIf=\"src$ | async as src; else defaultBg\" [src]=\"src\" class=\"inherit-size\"></image-or-icon>\r\n<ng-template #defaultBg>\r\n    <image-or-icon *ngIf=\"defaultBackground\" [src]=\"defaultBackground\" class=\"inherit-size\"></image-or-icon>\r\n</ng-template>\r\n<div class=\"action-buttons\">\r\n    <button type=\"button\" class=\"action-button\" mat-stroked-button color=\"accent\" [uploadButton]=\"uploadInputConfig\" (filesSelected)=\"uploadImage($event)\" trans>{{buttonText}}</button>\r\n    <button type=\"button\" class=\"action-button delete-button\" mat-icon-button *ngIf=\"src$ | async\" (click)=\"deleteUpload()\">\r\n        <mat-icon svgIcon=\"delete\"></mat-icon>\r\n    </button>\r\n</div>\r\n<upload-progress-bar></upload-progress-bar>","import {ChangeDetectorRef, Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {User} from '@common/core/types/models/User';\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\nimport {Track} from '../../models/Track';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\nimport {CurrentUser} from '@common/auth/current-user';\n\nconst BASE_URI = 'user-profile';\n\nexport interface GetProfileResponse {\n    user: User;\n    canUploadTracks: boolean;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserProfileService {\n    constructor(private http: AppHttpClient, private currentUser: CurrentUser) {}\n\n    public get(id: number): BackendResponse<GetProfileResponse> {\n        return this.http.get(`${BASE_URI}/${id}`);\n    }\n\n    public update(id: number, params: object): BackendResponse<{user: User}> {\n        return this.http.put(`${BASE_URI}/${id}`, params);\n    }\n\n    public loadMore<T>(userId: number, contentType: string, params: {page: number}): PaginatedBackendResponse<T> {\n        return this.http.get(`${BASE_URI}/${userId}/load-more/${contentType}`, params);\n    }\n\n    public follow(user: User, cd: ChangeDetectorRef) {\n        this.http.post(`users/${user.id}/follow`).subscribe(() => {\n            this.currentUser.getModel().followed_users.push(user);\n            cd.markForCheck();\n        });\n    }\n\n    public unfollow(user: User, cd: ChangeDetectorRef) {\n        this.http.post(`users/${user.id}/unfollow`).subscribe(() => {\n            const followedUsers = this.currentUser.getModel().followed_users,\n                i = followedUsers.findIndex(curr => curr.id === user.id);\n            followedUsers.splice(i, 1);\n            cd.markForCheck();\n        });\n    }\n\n    public currentUserIsFollowing(user: User): boolean {\n        if ( ! this.currentUser.getModel().followed_users) return false;\n        return !!this.currentUser.getModel().followed_users.find(curr => curr.id === user.id);\n    }\n}\n","<div class=\"modal-header\">\n    <h2 class=\"modal-title\" mat-dialog-title trans>Edit your profile</h2>\n    <button type=\"button\" mat-icon-button (click)=\"close()\" tabindex=\"-1\" class=\"close-button\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" [formGroup]=\"form\" ngNativeValidate>\n    <mat-dialog-content>\n        <ng-container formGroupName=\"profile\">\n            <upload-image-control class=\"header-image-control\" buttonText=\"Upload header image\" [uploadConfig]=\"headerImageUploadConfig()\" (fileDeleted)=\"confirm(false)\" formControlName=\"header_image\"></upload-image-control>\n        </ng-container>\n        <div class=\"flex-container\">\n            <ng-container formGroupName=\"user\">\n                <upload-image-control [uploadConfig]=\"avatarUploadConfig()\" (fileDeleted)=\"confirm(false)\" buttonText=\"Upload avatar\" formControlName=\"avatar\"></upload-image-control>\n            </ng-container>\n            <div class=\"many-inputs right-column\">\n                <ng-container formGroupName=\"user\">\n                    <div class=\"input-container\">\n                        <label for=\"profile-username\" trans>Display Name</label>\n                        <input type=\"text\" id=\"profile-username\" formControlName=\"username\" required>\n                    </div>\n\n                    <div class=\"inline-inputs-container many-inputs\">\n                        <div class=\"input-container\">\n                            <label for=\"profile-first_name\" trans>First Name</label>\n                            <input type=\"text\" id=\"profile-first_name\" formControlName=\"first_name\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"profile-last_name\" trans>Last Name</label>\n                            <input type=\"text\" id=\"profile-last_name\" formControlName=\"last_name\">\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container formGroupName=\"profile\">\n                    <div class=\"inline-inputs-container many-inputs\">\n                        <div class=\"input-container\">\n                            <label for=\"profile-city\" trans>City</label>\n                            <input type=\"text\" id=\"profile-city\" formControlName=\"city\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"profile-country\" trans>Country</label>\n                            <select id=\"profile-country\" formControlName=\"country\">\n                                <option [value]=\"country.name\" *ngFor=\"let country of countries$ | async\">{{country.name}}</option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <div class=\"input-container\">\n                        <label for=\"profile-description\" trans>Description</label>\n                        <textarea type=\"text\" id=\"profile-description\" formControlName=\"description\" rows=\"6\" maxlength=\"250\"></textarea>\n                    </div>\n                </ng-container>\n            </div>\n        </div>\n        <div class=\"links-container\">\n            <div class=\"links-header\">\n                <div class=\"text\" trans>Your Links</div>\n                <button type=\"button\" class=\"add-link-button\" mat-flat-button color=\"accent\" (click)=\"addNewLink()\" trans>Add link</button>\n            </div>\n            <ul formArrayName=\"links\">\n                <li *ngFor=\"let link of linkArray().controls; let index = index\" [formGroupName]=\"index\">\n                    <div class=\"inline-inputs-container inline-link-container many-inputs\">\n                        <div class=\"input-container\">\n                            <label [for]=\"'url-' + index\" trans>Url</label>\n                            <input type=\"url\" [id]=\"'url-' + index\" formControlName=\"url\" required>\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"title\" trans>Short Title</label>\n                            <input type=\"text\" id=\"title\" formControlName=\"title\" required>\n                        </div>\n                        <button type=\"button\" mat-icon-button class=\"remove-link-button\" (click)=\"deleteLink(index)\">\n                            <mat-icon svgIcon=\"delete\"></mat-icon>\n                        </button>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button class=\"cancel-button\" trans>Close</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" class=\"submit-button\" [disabled]=\"loading$ | async\" trans>Save</button>\n    </mat-dialog-actions>\n</form>\n","import {ChangeDetectionStrategy, Component, Inject, Optional} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {User} from '@common/core/types/models/User';\nimport {FormArray, FormBuilder} from '@angular/forms';\nimport {UserProfileService} from '../../user-profile.service';\nimport {BehaviorSubject} from 'rxjs';\nimport {delay, finalize} from 'rxjs/operators';\nimport {UserLink} from '../../../../models/UserLink';\nimport {AvatarValidator} from '@common/account-settings/avatar-validator';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ImageUploadValidator} from '../../../image-upload-validator';\nimport {CountryListItem, ValueLists} from '@common/core/services/value-lists.service';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\n\ninterface EditUserProfileModalData {\n    user: User;\n}\n\n@Component({\n    selector: 'edit-user-profile-modal',\n    templateUrl: './edit-user-profile-modal.component.html',\n    styleUrls: ['./edit-user-profile-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EditUserProfileModalComponent {\n    public loading$ = new BehaviorSubject<boolean>(false);\n\n    public form = this.fb.group({\n        user: this.fb.group({\n            avatar: [''],\n            username: [''],\n            first_name: [''],\n            last_name: [''],\n        }),\n        profile: this.fb.group({\n            city: [''],\n            country: [''],\n            header_image: [''],\n            description: [''],\n        }),\n        links: this.fb.array([]),\n    });\n    public countries$ = new BehaviorSubject<CountryListItem[]>([]);\n\n    constructor(\n        private fb: FormBuilder,\n        private dialogRef: MatDialogRef<EditUserProfileModalComponent>,\n        private profiles: UserProfileService,\n        private avatarValidator: AvatarValidator,\n        private toast: Toast,\n        private imageValidator: ImageUploadValidator,\n        private valueLists: ValueLists,\n        @Optional() @Inject(MAT_DIALOG_DATA) public data: EditUserProfileModalData,\n    ) {\n        this.form.patchValue({\n            user: this.data.user,\n            profile: this.data.user.profile,\n        });\n\n        this.data.user.links.forEach(link => {\n            this.addNewLink(link);\n        });\n\n        this.valueLists.get(['countries']).subscribe(response => {\n            this.countries$.next(response.countries);\n        });\n\n        this.form.get('profile.header_image')\n            .valueChanges\n            .pipe(delay(0)) // wait \"this.form.value\" to update\n            .subscribe(() => {\n                this.confirm(false);\n            });\n    }\n\n    public confirm(closeModal = true) {\n        this.loading$.next(true);\n        this.profiles.update(this.data.user.id, this.form.value)\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                if (closeModal) {\n                    this.toast.open('Profile updated.');\n                    this.close(response.user);\n                }\n            });\n    }\n\n    public close(user?: User) {\n        this.dialogRef.close(user);\n    }\n\n    public linkArray() {\n        return this.form.get('links') as FormArray;\n    }\n\n    public addNewLink(link: Partial<UserLink> = {}) {\n        this.linkArray().push(this.fb.group({url: [link.url || ''], title: [link.title || '']}));\n    }\n\n    public deleteLink(index: number) {\n        this.linkArray().removeAt(index);\n    }\n\n    public avatarUploadConfig(): UploadApiConfig {\n        return {\n            uri: `users/${this.data.user.id}/avatar`,\n            validator: this.avatarValidator,\n        };\n    }\n\n    public headerImageUploadConfig(): UploadApiConfig {\n        return {\n            uri: 'uploads/images',\n            httpParams: {diskPrefix: 'user_header_media'},\n            validator: this.imageValidator,\n        };\n    }\n}\n","import { AfterViewInit, ElementRef, HostBinding, Input, NgZone, OnChanges, SimpleChanges, Directive } from '@angular/core';\r\nimport {UserProfileService} from '../../user-profile.service';\r\nimport {User} from '@common/core/types/models/User';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\r\nimport {InfiniteScroll} from '@common/core/ui/infinite-scroll/infinite.scroll';\r\nimport {finalize} from 'rxjs/operators';\r\n\r\n@Directive()\nexport abstract class BaseProfileTab<T> extends InfiniteScroll implements AfterViewInit, OnChanges {\r\n    @Input() user: User;\r\n    @Input() @HostBinding('class.visible') visible: boolean;\r\n    protected abstract contentType: string;\r\n    public pagination$ = new BehaviorSubject<PaginationResponse<T>>(null);\r\n    public loading$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        protected userProfile: UserProfileService,\r\n        protected el: ElementRef<HTMLElement>,\r\n        protected zone: NgZone,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // initial content load\r\n        if (this.visible && !this.pagination$.value && !this.isLoading()) {\r\n            this.loadMoreItems();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        const scrollContainer = this.el.nativeElement.closest('.page-wrapper') as HTMLElement;\r\n        this.el = new ElementRef(scrollContainer);\r\n        super.ngOnInit();\r\n    }\r\n\r\n    protected canLoadMore(): boolean {\r\n        return this.visible && (!this.pagination$.value || (this.pagination$.value.last_page > this.pagination$.value.current_page));\r\n    }\r\n\r\n    protected isLoading(): boolean {\r\n        return this.loading$.value;\r\n    }\r\n\r\n    protected loadMoreItems() {\r\n        this.loading$.next(true);\r\n        this.userProfile.loadMore<T>(this.user.id, this.contentType, {page: this.currentPage() + 1})\r\n            .pipe(finalize(() => this.loading$.next(false)))\r\n            .subscribe(response => {\r\n                this.pagination$.next({\r\n                    ...response.pagination,\r\n                    data: [...this.currentData(), ...response.pagination.data],\r\n                });\r\n            });\r\n    }\r\n\r\n    protected currentPage() {\r\n        return this.pagination$.value ? this.pagination$.value.current_page : 0;\r\n    }\r\n\r\n    protected currentData() {\r\n        return this.pagination$.value ? this.pagination$.value.data : [];\r\n    }\r\n}\r\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <media-grid *ngIf=\"pagination.data.length\" [@fadeIn]=\"visible\">\n        <ng-container *ngFor=\"let playlist of pagination.data\">\n            <playlist-item [playlist]=\"playlist\" *ngIf=\"playlist.public\" [creator]=\"user\"></playlist-item>\n        </ng-container>\n    </media-grid>\n\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text trans>Seems like this user has not created any playlists yet.</span>\n    </no-results-message>\n</ng-container>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {Playlist} from '../../../../../models/Playlist';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\n\n@Component({\n    selector: 'user-playlists-tab',\n    templateUrl: './user-playlists-tab.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UserPlaylistsTabComponent extends BaseProfileTab<Playlist> {\n    protected contentType = 'playlists';\n}\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text trans>No tracks yet</span>\n        <span secondary-text><ng-content></ng-content></span>\n    </no-results-message>\n    <div [@fadeIn]=\"visible\">\n        <media-list-item [media]=\"track\" *ngFor=\"let track of pagination.data\"></media-list-item>\n    </div>\n</ng-container>\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>","import {Component, ElementRef, Input, NgZone, OnDestroy} from '@angular/core';\nimport {Track} from '../../../../../models/Track';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\nimport {UserProfileService} from '../../../user-profile.service';\nimport {Tracks} from '../../../../tracks/tracks.service';\nimport {Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n@Component({\n    selector: 'uploaded-tracks-tab',\n    templateUrl: './uploaded-tracks-tab.component.html',\n    styleUrls: ['./uploaded-tracks-tab.component.scss'],\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UploadedTracksTabComponent extends BaseProfileTab<Track> implements OnDestroy {\n    @Input() contentType: string;\n    private trackDeleteSub: Subscription;\n\n    constructor(\n        protected userProfile: UserProfileService,\n        protected el: ElementRef<HTMLElement>,\n        protected zone: NgZone,\n        protected tracks: Tracks,\n    ) {\n        super(userProfile, el, zone);\n\n        this.trackDeleteSub = this.tracks.tracksDeleted$\n            .pipe(filter(() => !!this.pagination$.value))\n            .subscribe(trackIds => {\n                const newTracks = this.pagination$.value.data.filter(track => {\n                    return !trackIds.includes(track.id);\n                });\n                this.pagination$.next({\n                    ...this.pagination$.value,\n                    data: newTracks\n                });\n            });\n    }\n\n    ngOnDestroy() {\n        this.trackDeleteSub.unsubscribe();\n        super.ngOnDestroy();\n    }\n}\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <div class=\"followed-users\" *ngIf=\"pagination.data.length\" [@fadeIn]=\"visible\">\n        <div class=\"follower-row\" *ngFor=\"let followedUser of pagination.data\">\n            <media-image [media]=\"followedUser\"></media-image>\n            <div class=\"meta\">\n                <a class=\"name hover-underline\" [routerLink]=\"urls.user(followedUser)\">{{followedUser['display_name']}}</a>\n                <div class=\"followers\">{{followedUser.followers_count}} <span trans>Followers</span></div>\n            </div>\n            <button mat-stroked-button class=\"follow-button\" (click)=\"profile.follow(followedUser, cd)\" *ngIf=\"!profile.currentUserIsFollowing(followedUser) && ! isCurrentUser(followedUser)\" trans>Follow</button>\n            <button mat-stroked-button class=\"follow-button\" (click)=\"profile.unfollow(followedUser, cd)\" *ngIf=\"profile.currentUserIsFollowing(followedUser) && ! isCurrentUser(followedUser)\" trans>Unfollow</button>\n        </div>\n    </div>\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text><ng-content></ng-content></span>\n    </no-results-message>\n</ng-container>\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, NgZone} from '@angular/core';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {User} from '@common/core/types/models/User';\nimport {WebPlayerUrls} from '../../../../web-player-urls.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {UserProfileService} from '../../../user-profile.service';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\n\n@Component({\n    selector: 'user-follows-tab',\n    templateUrl: './user-follows-tab.component.html',\n    styleUrls: ['./user-follows-tab.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UserFollowsTabComponent extends BaseProfileTab<User> {\n    @Input() contentType: string;\n    constructor(\n        public profile: UserProfileService,\n        protected el: ElementRef<HTMLElement>,\n        public urls: WebPlayerUrls,\n        public currentUser: CurrentUser,\n        public cd: ChangeDetectorRef,\n        protected zone: NgZone,\n    ) {\n        super(profile, el, zone);\n    }\n\n    public isCurrentUser(user: User) {\n        return user.id === this.currentUser.get('id');\n    }\n}\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text trans>No albums yet</span>\n        <span secondary-text trans [transValues]=\"{displayName: user.display_name}\">Follow :displayName for updates on albums they share in the future.</span>\n    </no-results-message>\n    <div [@fadeIn]=\"visible\">\n        <media-list-item [media]=\"album\" *ngFor=\"let album of pagination.data\"></media-list-item>\n    </div>\n</ng-container>\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {Album} from '../../../../../models/Album';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\nimport {UserProfileService} from '../../../user-profile.service';\nimport {Tracks} from '../../../../tracks/tracks.service';\nimport {filter} from 'rxjs/operators';\nimport {Albums} from '../../../../albums/albums.service';\nimport {Subscription} from 'rxjs';\n\n@Component({\n    selector: 'user-albums-tab',\n    templateUrl: './user-albums-tab.component.html',\n    styleUrls: ['./user-albums-tab.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UserAlbumsTabComponent extends BaseProfileTab<Album> implements OnDestroy {\n    protected contentType = 'albums';\n    private albumDeleteSub: Subscription;\n\n    constructor(\n        protected userProfile: UserProfileService,\n        protected el: ElementRef<HTMLElement>,\n        protected zone: NgZone,\n        protected albums: Albums,\n    ) {\n        super(userProfile, el, zone);\n\n        this.albumDeleteSub = this.albums.albumsDeleted$\n            .pipe(filter(() => !!this.pagination$.value))\n            .subscribe(albumIds => {\n                const newAlbums = this.pagination$.value.data.filter(album => {\n                    return !albumIds.includes(album.id);\n                });\n                this.pagination$.next({\n                    ...this.pagination$.value,\n                    data: newAlbums\n                });\n            });\n    }\n\n    ngOnDestroy() {\n        this.albumDeleteSub.unsubscribe();\n        super.ngOnDestroy();\n    }\n}\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text trans>No reposts yet</span>\n        <span secondary-text trans [transValues]=\"{displayName: user.display_name}\">Follow :displayName for updates on reposts they share in the future.</span>\n    </no-results-message>\n    <div [@fadeIn]=\"visible\">\n        <media-list-item [media]=\"repost.repostable\" [reposter]=\"user\" *ngFor=\"let repost of pagination.data\"></media-list-item>\n    </div>\n</ng-container>\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {Repost} from '../../../../../models/repost';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\n\n@Component({\n    selector: 'user-reposts-tab',\n    templateUrl: './user-reposts-tab.component.html',\n    styleUrls: ['./user-reposts-tab.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UserRepostsTabComponent extends BaseProfileTab<Repost> {\n    protected contentType = 'reposts';\n}\n","<ng-container *ngIf=\"user$ | async as user\">\n    <div class=\"media-page-header\">\n        <div class=\"header-bg\" [style.background-image]=\"getProfileBackground()\"></div>\n        <div class=\"flex-container\">\n            <media-image class=\"header-image\" [media]=\"user\"></media-image>\n            <div class=\"header-content-wrapper\">\n                <div class=\"header-content\">\n                    <h1 class=\"title\">\n                        {{user.display_name}}\n                        <button type=\"button\" class=\"pro-badge\" *ngIf=\"currentUser.isSubscribed()\" mat-icon-button [matTooltip]=\"'Pro member' | trans\">\n                            <mat-icon svgIcon=\"star\"></mat-icon>\n                        </button>\n                    </h1>\n                    <div class=\"subtitle header-subtitle\">\n                        <div class=\"column first-column\">\n                            <div class=\"column-value\">{{user.followers_count}}</div>\n                            <div class=\"column-title\" trans>Followers</div>\n                        </div>\n                        <div class=\"column\">\n                            <div class=\"column-value\">{{user.followed_users_count}}</div>\n                            <div class=\"column-title\" trans>Following</div>\n                        </div>\n                    </div>\n                    <div class=\"action-buttons\" *ngIf=\"user.id !== currentUser.get('id')\">\n                        <button mat-flat-button color=\"accent\" class=\"action-button\" (click)=\"profile.follow(user, cd)\" *ngIf=\"!profile.currentUserIsFollowing(user)\" trans>Follow</button>\n                        <button mat-flat-button color=\"accent\" class=\"action-button\" (click)=\"profile.unfollow(user, cd)\" *ngIf=\"profile.currentUserIsFollowing(user)\" trans>Unfollow</button>\n                    </div>\n                    <div class=\"text-emphasis\" *ngIf=\"user.profile.description\">\n                        <p class=\"description-text\">{{user.profile.description}}</p>\n                    </div>\n                    <div class=\"profile-location\" *ngIf=\"user.profile.city || user.profile.country\">\n                        <span class=\"text-emphasis\">\n                            <span class=\"city\" *ngIf=\"user.profile.city\">{{user.profile.city}}</span>\n                            <span class=\"country\" *ngIf=\"user.profile.country\">, {{user.profile.country}}</span>\n                        </span>\n                    </div>\n                </div>\n                <div class=\"edit-buttons\">\n                    <button type=\"button\" mat-stroked-button *ngIf=\"user.id === currentUser.get('id')\" (click)=\"openEditProfileModal()\">\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\n                        <span trans>Edit</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"nav-links-wrapper\">\n            <div class=\"nav-links\">\n                <a class=\"nav-link\" *ngFor=\"let tab of tabs$ | async\" [routerLink]=\"urls.user(user, tab)\" [class.active]=\"activeTabIs(tab)\" trans>{{tab}}</a>\n            </div>\n            <div class=\"user-links\">\n                <a [href]=\"userLink.url\" target=\"_blank\" mat-icon-button *ngFor=\"let userLink of user.links\" [matTooltip]=\"userLink.title\">\n                    <img class=\"user-link-image\" [src]=\"favicon(userLink.url)\" [alt]=\"userLink.title\">\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <ad-host slot=\"ads.general_top\" class=\"margin-top\"></ad-host>\n\n    <div class=\"tabs\">\n        <ng-container *ngIf=\"canUploadTracks$ | async\">\n            <uploaded-tracks-tab [user]=\"user\" contentType=\"uploadedTracks\" class=\"tab\" [visible]=\"activeTabIs('tracks')\">\n                <span trans [transValues]=\"{displayName: user.display_name}\">Follow :displayName for updates on tracks they share in the future.</span>\n            </uploaded-tracks-tab>\n            <user-albums-tab [user]=\"user\" class=\"tab\" [visible]=\"activeTabIs('albums')\"></user-albums-tab>\n            <user-reposts-tab [user]=\"user\" class=\"tab\" [visible]=\"activeTabIs('reposts')\"></user-reposts-tab>\n        </ng-container>\n        <user-playlists-tab [user]=\"user\" class=\"tab\" [visible]=\"activeTabIs('playlists')\"></user-playlists-tab>\n        <uploaded-tracks-tab [user]=\"user\" contentType=\"likedTracks\" class=\"tab\" [visible]=\"activeTabIs('likes')\">\n            <span trans [transValues]=\"{displayName: user.display_name}\">Follow :displayName for updates on tracks they like in the future.</span>\n        </uploaded-tracks-tab>\n        <user-follows-tab [user]=\"user\" class=\"tab\" contentType=\"followers\" [visible]=\"activeTabIs('followers')\">\n            <span trans [transValues]=\"{displayName: user.display_name}\">Seems like no one is following :displayName yet.</span>\n        </user-follows-tab>\n        <user-follows-tab [user]=\"user\" class=\"tab\" contentType=\"followedUsers\" [visible]=\"activeTabIs('following')\">\n            <span trans [transValues]=\"{displayName: user.display_name}\">Seems like :displayName is not following anyone yet.</span>\n        </user-follows-tab>\n    </div>\n\n    <ad-host slot=\"ads.general_bottom\" class=\"margin-bottom\"></ad-host>\n</ng-container>\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, NavigationEnd, Router} from '@angular/router';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {WebPlayerUrls} from '../../web-player-urls.service';\r\nimport {BehaviorSubject, Subscription} from 'rxjs';\r\nimport {filter} from 'rxjs/operators';\r\nimport {User} from '@common/core/types/models/User';\r\nimport {CurrentUser} from 'common/auth/current-user';\r\nimport {Users} from '@common/auth/users.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {EditUserProfileModalComponent} from './edit-user-profile-modal/edit-user-profile-modal.component';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\nimport {getFaviconFromUrl} from '@common/core/utils/get-favicon-from-url';\r\nimport {UserProfileService} from '../user-profile.service';\r\n\r\n@Component({\r\n    selector: 'user-profile-page',\r\n    templateUrl: './user-profile-page.component.html',\r\n    styleUrls: ['./user-profile-page.component.scss'],\r\n    providers: [UploadQueueService],\r\n})\r\nexport class UserProfilePageComponent implements OnInit, OnDestroy {\r\n    public tabs$ = new BehaviorSubject<string[]>([]);\r\n    private subscriptions: Subscription[] = [];\r\n    public user$ = new BehaviorSubject<User>(null);\r\n    public activeTab: string;\r\n    public canUploadTracks$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        protected settings: Settings,\r\n        public urls: WebPlayerUrls,\r\n        protected users: Users,\r\n        public currentUser: CurrentUser,\r\n        public cd: ChangeDetectorRef,\r\n        public profile: UserProfileService,\r\n        protected modal: Modal,\r\n        protected toast: Toast,\r\n        protected sanitizer: DomSanitizer,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(data => {\r\n            this.canUploadTracks$.next(data.api.canUploadTracks);\r\n            this.user$.next(data.api.user);\r\n            let defaultTabs = ['likes', 'playlists', 'following', 'followers'];\r\n            if (this.canUploadTracks$.value) {\r\n                defaultTabs = [...['tracks', 'albums', 'reposts'], ...defaultTabs];\r\n            }\r\n            this.tabs$.next(defaultTabs);\r\n            this.setActiveTab(this.router.url);\r\n        });\r\n        const sub = this.router.events\r\n            .pipe(filter(event => event instanceof NavigationEnd))\r\n            .subscribe((event: NavigationEnd) => {\r\n                this.setActiveTab(event.url);\r\n            });\r\n        this.subscriptions.push(sub);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => {\r\n            subscription.unsubscribe();\r\n        });\r\n        this.subscriptions = [];\r\n    }\r\n\r\n    public getProfileBackground() {\r\n        const profile = this.user$.value.profile;\r\n        if (profile.header_colors || profile.header_image) {\r\n            const background = profile.header_image ?\r\n                `url(${profile.header_image})` :\r\n                `linear-gradient(315deg, ${profile.header_colors[0]} 0%, ${profile.header_colors[1]} 100%)`;\r\n            return this.sanitizer.bypassSecurityTrustStyle(background);\r\n        }\r\n    }\r\n\r\n    public activeTabIs(name: string) {\r\n        return this.activeTab === name;\r\n    }\r\n\r\n    public setActiveTab(url: string) {\r\n        const tab = url.split('/').pop();\r\n        this.activeTab = this.tabs$.value.includes(tab) ? tab : this.tabs$.value[0];\r\n    }\r\n\r\n    public openEditProfileModal() {\r\n        this.modal.open(EditUserProfileModalComponent, {user: this.user$.value})\r\n            .beforeClosed()\r\n            .subscribe(updatedUser => {\r\n                if (updatedUser) {\r\n                    this.user$.next({...this.user$.value, ...updatedUser});\r\n                }\r\n            });\r\n    }\r\n\r\n    public favicon(url: string) {\r\n        return getFaviconFromUrl(url);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {WebPlayerState} from '../../web-player-state.service';\r\nimport {catchError, mergeMap} from 'rxjs/operators';\r\nimport {EMPTY, of} from 'rxjs';\r\nimport {BackendResponse} from '@common/core/types/backend-response';\r\nimport {GetProfileResponse, UserProfileService} from '../user-profile.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserProfilePageResolver implements Resolve<BackendResponse<GetProfileResponse>> {\r\n    constructor(\r\n        private profiles: UserProfileService,\r\n        private router: Router,\r\n        private state: WebPlayerState\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BackendResponse<GetProfileResponse> {\r\n        this.state.loading = true;\r\n        const id = +route.paramMap.get('id');\r\n\r\n        return this.profiles.get(id).pipe(\r\n            catchError(() => {\r\n                this.state.loading = false;\r\n                this.router.navigate(['/']);\r\n                return EMPTY;\r\n            }),\r\n            mergeMap(response => {\r\n                this.state.loading = false;\r\n                if (response.user) {\r\n                    return of(response);\r\n                } else {\r\n                    this.router.navigate(['/']);\r\n                    return EMPTY;\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n","import {RouterModule, Routes} from '@angular/router';\r\nimport {EmptyRouteComponent} from '@common/core/ui/empty-route/empty-route.component';\r\nimport {UserProfilePageComponent} from './user-profile-page.component';\r\nimport {UserProfilePageResolver} from './user-profile-page-resolver.service';\r\nimport {NgModule} from '@angular/core';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: ':id/:name',\r\n        component: UserProfilePageComponent,\r\n        resolve: {api: UserProfilePageResolver},\r\n        data: {name: 'user', noReuse: true},\r\n        children: [\r\n            {path: ':tabName', component: EmptyRouteComponent},\r\n        ]\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UserProfileRoutingModule {\r\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {UserProfilePageComponent} from './user-profile-page.component';\nimport {EditUserProfileModalComponent} from './edit-user-profile-modal/edit-user-profile-modal.component';\nimport {UploadedTracksTabComponent} from './tabs/uploaded-tracks-tab/uploaded-tracks-tab.component';\nimport {UserAlbumsTabComponent} from './tabs/user-albums-tab/user-albums-tab.component';\nimport {UserPlaylistsTabComponent} from './tabs/user-playlists-tab/user-playlists-tab.component';\nimport {UserRepostsTabComponent} from './tabs/user-reposts-tab/user-reposts-tab.component';\nimport {UserFollowsTabComponent} from './tabs/user-follows-tab/user-follows-tab.component';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {RouterModule} from '@angular/router';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {MediaListItemModule} from '../../tracks/media-list-item/media-list-item.module';\nimport {PlayerUiModule} from '../../player-ui.module';\nimport {TrackActionsBarModule} from '../../tracks/track-actions-bar/track-actions-bar.module';\nimport {UserProfileRoutingModule} from './user-profile-routing.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {AdHostModule} from '@common/core/ui/ad-host/ad-host.module';\nimport {NoResultsMessageModule} from '@common/core/ui/no-results-message/no-results-message.module';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n@NgModule({\n    declarations: [\n        UserProfilePageComponent,\n        EditUserProfileModalComponent,\n        UploadedTracksTabComponent,\n        UserAlbumsTabComponent,\n        UserPlaylistsTabComponent,\n        UserRepostsTabComponent,\n        UserFollowsTabComponent,\n    ],\n    imports: [\n        CommonModule,\n        UploadImageControlModule,\n        MediaImageModule,\n        MediaListItemModule,\n        PlayerUiModule,\n        TrackActionsBarModule,\n        RouterModule,\n        UserProfileRoutingModule,\n        TranslationsModule,\n        AdHostModule,\n        NoResultsMessageModule,\n        LoadingIndicatorModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        // material\n        MatDialogModule,\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n    ],\n})\nexport class UserProfileModule {\n}\n","export function getFaviconFromUrl(url: string) {\r\n    if ( ! url) {\r\n        return null;\r\n    }\r\n    const domain = new URL(url).origin;\r\n    return 'https://www.google.com/s2/favicons?domain=' + domain;\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, OnDestroy } from '@angular/core';\r\nimport { UploadQueueService } from '../upload-queue/upload-queue.service';\r\nimport { animationFrameScheduler, Subscription } from 'rxjs';\r\nimport { throttleTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'upload-progress-bar',\r\n    templateUrl: './upload-progress-bar.component.html',\r\n    styleUrls: ['./upload-progress-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UploadProgressBarComponent implements OnDestroy {\r\n    @HostBinding('class.hidden') hidden = true;\r\n    private subscription: Subscription;\r\n    public progress: number;\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        public uploadQueue: UploadQueueService,\r\n        private cd: ChangeDetectorRef,\r\n    ) {\r\n        this.subscription = this.uploadQueue.totalProgress()\r\n            // material progress bar animation lasts 250ms\r\n            .pipe(throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}))\r\n            .subscribe(progress => {\r\n                this.progress = progress;\r\n                this.hidden = progress === 100 || this.uploadQueue.count$.value.pending === 0;\r\n                this.cd.markForCheck();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n}\r\n\r\n","<mat-progress-bar mode=\"determinate\" [value]=\"progress\" color=\"accent\"></mat-progress-bar>\r\n"]}